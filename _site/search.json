[
  {
    "objectID": "notes.html",
    "href": "notes.html",
    "title": "notes",
    "section": "",
    "text": "\\(\\color{red}{\\text{TODO:}}\\) Add the following to `_quarto.yml`\n\nRe-list Projects\n\n\nRestore search\nMaybe restore title\n\n\n# website:\n#   title: \"Portfolio\"\n#   \n#   search: \n#     location: navbar\n#     type: overlay\n#   navbar:\n#     left: \n#       - text: Home\n#         href: index.qmd\n#       - text: Projects\n#         href: projects.qmd\n#     right:\n#       - text: Resume\n#         href: resume.qmd\n#       - text: CV\n#         href: curriculum-vitae.qmd\n#       - icon: github\n#         href: https://github.com/danielkick\n#       - icon: linkedin\n#         href: https://www.linkedin.com/in/daniel-kick-5a449b9a/\n\nDirectly usable icons can be found at:\nhttps://icons.getbootstrap.com/\nIf you use gifs gzip to decrease size to prevent the website from becoming sluggish\ncode highlighting can be found at https://quarto.org/docs/output-formats/html-code.html#highlighting"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Resume",
    "section": "",
    "text": "If no file appears, please check your downloads or follow this link to GitHub."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n(1 + 1)\n\n[1] 2\n\na <- list()\n\nfor(i in 1:2){\n  print(i)\n  a[i] <- i\n}\n\n[1] 1\n[1] 2\n\na\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "curriculum-vitae.html",
    "href": "curriculum-vitae.html",
    "title": "Curriculum Vitae",
    "section": "",
    "text": "If no file appears, please check your downloads or follow this link."
  },
  {
    "objectID": "posts_to_convert/2020-12-31-game-of-life/game-of-life.html",
    "href": "posts_to_convert/2020-12-31-game-of-life/game-of-life.html",
    "title": "Game of Life",
    "section": "",
    "text": "Introduction\nConway’s Game of Life is a toy model of cells that can produce rich outputs from simple rules. Some have gone as far as to use this game to create logic gates. In this post, we’ll be setting prerequisites to recognize interesting patterns not pushing the limits of what one can do with this game.\nAs a refresher before diving in, here are the rules of the game.\n\n\nCells in underpopulated locations (0 or 1 adjacent cells) die.\nCells in populated locations (2 or 3 adjacent cells) survive.\nCells in overpopulated locations (>3 adjacent cells) die.\nEmpty spaces in sufficiently populated locations (3 adjacent cells) spawn cells.\n\n\nTo start, we’ll create a matrix with cells (1) and spaces (0). Next we’ll add functions to apply these rules for a given number of iterations. Finally, we can randomly generate matrices and use cell population change over time to find patterns that oscillate.\nImplementing the rules of the game\nFirst we’ll define a matrix containing a “blinker” oscillator. This will help us test that the rules are correctly implemented. Since we’re growing “cells” we’ll give variables and functions related names such as “petri dish” for the matrix containing the cells.\n\npetri_dish <- t(matrix(c(\n  0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0,\n  0, 1, 1, 1, 0,\n  0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0\n), nrow = 5))\n\nNext we’ll tally the neighbors for each location. We could step through every row iand column j tallying the neighbors like so: sum(temp[c(i-1, i, i+1), c(j-1, j, j+1)]) - temp[i, j]. This approach would require logic for the edges and will be sluggish on large matrices. We’ll use a vectorized approach here instead. We’ll create eight matrices shifting the matrix orthogonally and diagonally relative to the starting one. Then we can sum these to get a matrix containing the number of neighbors each cell has. To account for the edges of the where we’ll surround the dish with 0s.\n\nrows <- nrow(petri_dish)\ncols <- ncol(petri_dish)\n# surround petri dish with 0s\ntemp <- matrix(data = 0, nrow = rows+2, ncol = cols+2)\ntemp[2:(1+rows), 2:(1+cols)] <- petri_dish\n\n# the location of the petri dish\ncenter_rows <- 2:(1+rows)\ncenter_cols <- 2:(1+cols)\n\n# shift the row and columns selected so we get each orthogonal and diagnonal shift\nslice_shifts <- expand.grid(\n  row_shift = c(-1, 0, 1),\n  col_shift = c(-1, 0, 1))\n\n# drop the no shift entry 0, 0 \nslice_shifts <- slice_shifts[!(slice_shifts$row_shift == 0 & slice_shifts$col_shift ==0), ]\n\n# Tally up neighbors\nneighbor_matix <- matrix(data = 0, nrow = rows, ncol = cols)\n\nfor (i in 1:nrow(slice_shifts)){\n  temp_rows <- center_rows+slice_shifts[i, \"row_shift\"]\n  temp_cols <- center_cols+slice_shifts[i, \"col_shift\"]\n  neighbor_matix <- neighbor_matix + temp[temp_rows, temp_cols]\n}\n\nNow we can create boolean matrices based on the neighbor tally and multiply these current matrix to\n\n# apply rules\n# live cells with 2-3 neighbors -> live\nsurviving_cells <- petri_dish * matrix(\n  as.numeric(neighbor_matix %in% c(2, 3)),\n                                       nrow = rows,\n                                       ncol = cols)\n# dead cells with 3 neighbors -> live\nrevived_cells <- (petri_dish == 0) * matrix(\n  as.numeric(neighbor_matix %in% c(3)),\n                                            nrow = rows,\n                                            ncol = cols)\n\n# new petri dish\npetri_dish <- surviving_cells + revived_cells\n\n\ngame_of_life <- function(petri_dish = petri_dish){\n  rows <- nrow(petri_dish)\n  cols <- ncol(petri_dish)\n  \n  # surround petri dish with 0s\n  temp <- matrix(data = 0, nrow = rows+2, ncol = cols+2)\n  temp[2:(1+rows), 2:(1+cols)] <- petri_dish\n  \n  \n  center_rows <- 2:(1+rows)\n  center_cols <- 2:(1+cols)\n  \n  slice_shifts <- expand.grid(\n    row_shift = c(-1, 0, 1),\n    col_shift = c(-1, 0, 1))\n  \n  # drop 0, 0 \n  slice_shifts <- slice_shifts[!(slice_shifts$row_shift == 0 & slice_shifts$col_shift ==0), ]\n  \n  # Tally up neighbors\n  neighbor_matix <- matrix(data = 0, nrow = rows, ncol = cols)\n  \n  for (i in 1:nrow(slice_shifts)){\n    temp_rows <- center_rows+slice_shifts[i, \"row_shift\"]\n    temp_cols <- center_cols+slice_shifts[i, \"col_shift\"]\n    neighbor_matix <- neighbor_matix + temp[temp_rows, temp_cols]\n  }\n  \n  # apply rules\n  # live cells with 2-3 neighbors -> live\n  surviving_cells <- petri_dish * matrix(as.numeric(neighbor_matix %in% c(2, 3)),\n                                         nrow = rows,\n                                         ncol = cols)\n  # dead cells with 3 neighbors -> live\n  revived_cells <- (petri_dish == 0) * matrix(as.numeric(neighbor_matix %in% c(3)),\n                                              nrow = rows,\n                                              ncol = cols)\n  \n  # new petri dish\n  petri_dish <- surviving_cells + revived_cells\n  return(petri_dish)\n  \n}\n\n\nsteps = 4\n\npetri_list <- list(petri_dish)\n\nfor(i in 1:steps){\n  petri_list[[i+1]] <- game_of_life(petri_dish = petri_list[[i]])\n}\n\n# add step\nwalk(1:length(petri_list), function(i){\n  temp <- petri_list[[i]]\n  temp <- as.data.frame(temp)\n  temp$RowNum <- 1:nrow(temp)\n  temp$Step <- i\n  petri_list[[i]] <<- temp\n})\n\n\npetri_dish_history <- do.call(rbind, petri_list)\n\npetri_dish_history <- petri_dish_history %>% \n  gather(ColNum, Cell,\n         names(petri_dish_history)[!(names(petri_dish_history) %in% c(\"RowNum\", \"Step\"))]) %>% \n  mutate(ColNum = as.numeric(str_remove(ColNum, \"V\")))\n\n\ngrow_petri_dish <- function(petri_dish = petri_dish,\n                            steps = 1){\n  \n  petri_list <- list(petri_dish)\n  \n  for(i in 1:steps){\n    petri_list[[i+1]] <- game_of_life(petri_dish = petri_list[[i]])\n  }\n  \n  # add step\n  walk(1:length(petri_list), function(i){\n    temp <- petri_list[[i]]\n    temp <- as.data.frame(temp)\n    temp$RowNum <- 1:nrow(temp)\n    temp$Step <- i\n    petri_list[[i]] <<- temp\n  })\n  \n  \n  petri_dish_history <- do.call(rbind, petri_list)\n  \n  petri_dish_history <- petri_dish_history %>% \n    gather(ColNum, Cell,\n           names(petri_dish_history)[!(names(petri_dish_history) %in% c(\"RowNum\", \"Step\"))]) %>% \n    mutate(ColNum = as.numeric(str_remove(ColNum, \"V\")))\n  \n  petri_dish_history <- petri_dish_history[, c(\"RowNum\", \"ColNum\", \"Cell\", \"Step\")]\n  \n  return(petri_dish_history = petri_dish_history)\n}\n\n\npetri_dish <- t(matrix(c(\n  0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0,\n  0, 1, 1, 1, 0,\n  0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0\n), nrow = 5))\n\npetri_dish_history <- grow_petri_dish(petri_dish = petri_dish, \n                                      steps = 3)\n\n\npetri_dish_history %>% \n  mutate(Cell = ifelse(Cell == 0, \"A\", \"B\")) %>% \n  ggplot(aes(x = ColNum, \n             y= RowNum, \n             fill = Cell))+\n  geom_tile()+\n  facet_wrap(.~Step)+\n  scale_fill_manual(values = c(\"White\", \"Black\"))+\n  theme_bw()+\n  theme(legend.position = \"\")\n\n\n\n\nTesting the game\n\n# toad\ngrow_petri_dish(petri_dish = \n                  t(matrix(c(\n                    0, 0, 0, 0, 0, 0,\n                    0, 0, 0, 0, 0, 0,\n                    0, 0, 1, 1, 1, 0,\n                    0, 1, 1, 1, 0, 0,\n                    0, 0, 0, 0, 0, 0,\n                    0, 0, 0, 0, 0, 0\n                  ), nrow = 6)), \n                steps = 5) %>% \n  mutate(Cell = ifelse(Cell == 0, \"A\", \"B\")) %>% \n  ggplot(aes(x = ColNum, \n             y= RowNum, \n             fill = Cell))+\n  geom_tile()+\n  facet_wrap(.~Step)+\n  scale_fill_manual(values = c(\"White\", \"Black\"))+\n  theme_bw()+\n  theme(legend.position = \"\")\n\n\n\n# glider\ngrow_petri_dish(petri_dish = \n                  t(matrix(c(\n                    0, 0, 1, 0, 0,\n                    1, 0, 1, 0, 0,\n                    0, 1, 1, 0, 0,\n                    0, 0, 0, 0, 0,\n                    0, 0, 0, 0, 0\n                  ), nrow = 5)), \n                steps = 5) %>% \n  mutate(Cell = ifelse(Cell == 0, \"A\", \"B\")) %>% \n  ggplot(aes(x = ColNum, \n             y= RowNum, \n             fill = Cell))+\n  geom_tile()+\n  facet_wrap(.~Step)+\n  scale_fill_manual(values = c(\"White\", \"Black\"))+\n  theme_bw()+\n  theme(legend.position = \"\")\n\n\n\n\n\n\n# randomly initialize petri dish\ninnoculate_petri_dish <- function(\n  petri_density = .3,\n  petri_rows = 4,\n  petri_cols = 4,\n  surrounding_spaces = 0,\n  seed = 897987,\n  ...\n){\n  # if a seed value is provided use it\n  if (exists(\"seed\")){\n    set.seed(seed = seed)\n  }\n  \n  # create a blank plate \n  petri_dish <- matrix(0,\n                       nrow = petri_rows+(surrounding_spaces*2),\n                       ncol = petri_cols+(surrounding_spaces*2),\n  )\n  \n  # place a \"drop\" of cell containing solution in the center\n  cell_drop <- matrix(\n    rbinom(n = petri_rows*petri_cols, \n           size = 1, \n           prob = petri_density),\n    nrow = petri_rows,\n    ncol = petri_cols)\n  \n  petri_dish[(surrounding_spaces+1):(surrounding_spaces+petri_rows), (surrounding_spaces+1):(surrounding_spaces+petri_cols)] <- cell_drop\n  \n  return(petri_dish)\n}\n\n\ntrack_petri_dish <- function(petri_dish_history){\n  petri_dish_history %>% \n    group_by(Step) %>% \n    summarise(Population = sum(Cell, na.rm = T))\n}\n\nWhat density is most conducive to survival?\n\ncontrol_df <- as.data.frame(\n  expand.grid(\n    petri_density = seq(0.0001, 0.9999, length.out = 5),\n    seed = seq(1, 10)\n  )\n)\n\n#TODO\n# note, this can be easily parallelized with furrr::future_map()\ntictoc::tic()\nexperiment_list <- map(seq(1, nrow(control_df)), function(i){\n  experiment <- track_petri_dish(\n    petri_dish_history = \n      grow_petri_dish(\n        petri_dish = innoculate_petri_dish(\n          petri_density = control_df[i, \"petri_density\"],\n          petri_rows = 10,\n          petri_cols = 10,\n          surrounding_spaces = 0,\n          seed = control_df[i, \"seed\"]\n        ),\n        steps = 100) )\n  \n  experiment$Density = control_df[i, \"petri_density\"]\n  experiment$Seed = control_df[i, \"seed\"]\n  return(experiment)\n})\ntictoc::toc()\n\n8.048 sec elapsed\n\nexperiment_results <- do.call(rbind, experiment_list)\n\nexperiment_results %>% \n  ggplot(aes(x = Step, y = Population, group = Seed))+\n  geom_path(alpha = 0.1)+\n  facet_wrap(.~Density)"
  },
  {
    "objectID": "posts_to_convert/2022-07-09-phd-overview/phd-overview.html",
    "href": "posts_to_convert/2022-07-09-phd-overview/phd-overview.html",
    "title": "PhD Overview",
    "section": "",
    "text": "My PhD work focused on (1) how neuronal cell activity can change the strength of connections between cells, (2) how prolonged activity changes can alter excitability, membrane conductances, and mRNA expression, and (3) how closely mRNA abundances align with cell identity. This work was done with the mentorship of Dr. David Schulz and is available here.\nThe purpose of posts on these projects is not to restate the findings, but to shed light on the workflows and tricks that other budding researchers may find useful.\nIn brief, these studies address the following questions:\n\nHow does the difference of timing in activity between neurons change how easily influenced they are by partner cells? How does the difference between timing activity and ease of influence between cells alter cell output? (In revision) GitHub\nNeurons can compensate for short term (~1h) disruptions to their activity through altered membrane conductances. Are longer distruptions (24h) dealt with in the same way, or is compensation achieved through changes to other properties? (In preparation) GitHub\nHow well can machine learning use single cell transciptomic data or ion channel mRNA abundance recapitulate neuronal cell identity? (Published in PNAS) GitHub BitBucket"
  },
  {
    "objectID": "posts_to_convert/2022-07-09-post-doc-overview/post-doc-overview.html",
    "href": "posts_to_convert/2022-07-09-post-doc-overview/post-doc-overview.html",
    "title": "Post-Doc Overview",
    "section": "",
    "text": "Distill is a publication format for scientific and technical writing, native to the web.\nLearn more about using Distill at https://rstudio.github.io/distill."
  },
  {
    "objectID": "posts_to_convert/2022-07-09-collaborative-projects/collaborative-projects.html",
    "href": "posts_to_convert/2022-07-09-collaborative-projects/collaborative-projects.html",
    "title": "Collaborative Projects",
    "section": "",
    "text": "I provide assistance with project management, statistics, and programming to Dr. Michael Gray, Dr. Benton Berigan, and Sherryl Henderson (PhDc) in their study of neuronal property changes following spinal cord injury. (In Preparation) (Github)\nIn an ongoing collaboration, I provide analysis and domain expertise (along with Dr. David Schulz) to Dr. Satish Nair’s engineering lab. (In Preparation)\nCollaborating Dr. Adam J Northcutt, who acted as the biological lead on this project, I trained and evaluated machine learning models to classify neurons by their mRNA expression profiles. (Published in PNAS), GitHub )\nWorking with Dr. Brian Lane, I assisted with figure generation and analysis of physiological data. (Published in Elife)"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Post With Code\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\nHarlow Malloc\n\n\nJan 24, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\nnews\n\n\n\n\n\n\n\nTristan O’Malley\n\n\nJan 21, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Portfolio",
    "section": "",
    "text": "I am a PhD Biologist working as a research geneticist. Currently, my research focuses on using deep learning to predict maize yield from genetic, environmental, and management data using deep learning, machine learning, and statistical modeling. Previously, I focused on compensation of neural circuits to aberrant activity."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am a PhD Biologist working as a research geneticist. Currently, my research focuses on using deep learning to predict maize yield from genetic, environmental, and management data using deep learning, machine learning, and statistical modeling. Previously, I focused on compensation of neural circuits to aberrant activity."
  }
]