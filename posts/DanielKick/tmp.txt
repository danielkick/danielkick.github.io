==> 210609_python_jupyter_plugins/index.qmd <==
---
title: "Tips: Jupyter Plugins"
author: "Daniel Kick"
date: "2021-06-09"
image: "800px-Burmese_python_in_Berlin.jpg"
categories: 
  - code
  - python
  - beginner
  - tips
draft: false
---

<!-- https://commons.wikimedia.org/wiki/File:Burmese_python_in_Berlin.jpg -->

I came across a handy set of tools for jupyter. There are of extensions for the notebooks that give you access to code snips, autocomplete by default, rendering a notebook as a slide show, and other features. To get it installed within an anaconda virtual environment you may only need to install it with this command:

`conda install -c conda-forge jupyter_contrib_nbextensions`

I not all of the extensions were showing up for me until I also ran these two lines, so it may take a bit of fiddling to get it to run.

==> 210615_python_graph_gallery/index.qmd <==
---
title: "Tips: Find the Graph you want in using a Graph Gallery"
author: "Daniel Kick"
date: "2021-06-15"
image: "800px-Burmese_python_in_Berlin.jpg"
categories: 
  - code
  - python
  - beginner
  - tips
draft: false
---

<!-- https://commons.wikimedia.org/wiki/File:Burmese_python_in_Berlin.jpg -->

[This](https://www.python-graph-gallery.com/ "https://www.python-graph-gallery.com/") or similar sites can be helpful for looking up the right code/library for a plot. You can also find library specific ones. ([matplotlib](https://matplotlib.org/stable/gallery/index.html "https://matplotlib.org/stable/gallery/index.html"), [plotly](https://plotly.com/python/ "https://plotly.com/python/"))

One of R's main plotting libraries, ggplot2, describes plots by layering one component on top of another (e.g. starting with x and y variables, adding points, adding error bars, adding aesthetic adjustments). If that sort of approach appeals to you there is a python version of this library called plotnine ([github](https://github.com/has2k1/plotnine "https://github.com/has2k1/plotnine"), [example use](https://datacarpentry.org/python-ecology-lesson/07-visualization-ggplot-python/index.html "https://datacarpentry.org/python-ecology-lesson/07-visualization-ggplot-python/index.html")).
==> 210621_python_data_readability/index.qmd <==
---
title: "Tips: More Readable Data with `pretty-print`"
author: "Daniel Kick"
date: "2021-06-21"
image: "800px-Burmese_python_in_Berlin.jpg"
categories: 
  - code
  - python
  - beginner
  - tips
draft: false
---

<!-- https://commons.wikimedia.org/wiki/File:Burmese_python_in_Berlin.jpg -->

Here's a tool that some may find useful when working with data that's not yet in a `[DataFrame]`. It lets one "[pretty-print](https://docs.python.org/3/library/pprint.html "https://docs.python.org/3/library/pprint.html")" an object making any text that would wrap easier to read.

``` python
# [In]
print(results_dictionary)

==> 210713_python_custom_functions/index.qmd <==
---
title: "Tips: Reusing Custom Functions"
author: "Daniel Kick"
date: "2021-07-13"
image: "Python_molurus_bivittatus_Ile_aux_Serpents_201108_2.jpg"
categories: 
  - code
  - python
  - intermediate
  - tips
draft: false
---

_Amendment: For packaging functions also see [nbdev](https://nbdev.fast.ai/)._

I wanted to reuse a custom function across a few scripts without having copies of the same code in each script. The solution I found is to set up a [module](https://docs.python.org/3/tutorial/modules.html#packages "https://docs.python.org/3/tutorial/modules.html#packages") to hold these functions. This seems straightforward once you know how it's done.

1.  Set up a directory containing your functions and a blank file called `__init__.py`.

    ![]()![](Picture1.jpg)

==> 220216_python_silent_replace/index.qmd <==
---
title: "Tips: For those coming from R: Silent In Place Replacement"
author: "Daniel Kick"
date: "2022-02-16"
image: "Python_molurus_bivittatus_Ile_aux_Serpents_201108_2.jpg"
categories: 
  - code
  - python
  - r
  - intermediate
  - tips
draft: false
---

<!-- https://commons.wikimedia.org/wiki/File:Python_molurus_bivittatus_Ile_aux_Serpents_201108_2.jpg -->

Silent, in place assignment updating an object This tripped me up even though it's consistent with how I've seen other objects behave. I needed an attribute to hold data extracted from a collection of files in a directory and created a class for this.

``` python      
class hps_search_experiment:

==> 220323_python_caching_pickle/index.qmd <==
---
title: "Tips: Cache Intermediate Results with `pickle`"
author: "Daniel Kick"
date: "2022-03-23"
image: "Python_molurus_bivittatus_Ile_aux_Serpents_201108_2.jpg"
categories: 
  - code
  - python
  - intermediate
  - tips
draft: false
---

<!-- https://commons.wikimedia.org/wiki/File:Python_molurus_bivittatus_Ile_aux_Serpents_201108_2.jpg -->

Here's a useful pattern I've been getting a lot of mileage out of lately. If you're running an analysis that has a time consuming step you can save the result as a python readable "pickle" file. _Addendum:_ In some cases pickling a python objects can sometimes succeed in storing and retrieving data where a library's built in functions for saving/loading data fails. 

``` python
import pickle as pkl


==> 220523_r_comments_in_tables/index.qmd <==
---
title: "Trivia: R can have Comments in Tables"
author: "Daniel Kick"
date: "2023-05-23"
image: "Caractère_latin_d'écriture,_R_r.png"
categories: 
  - code
  - r
  - intermediate
  - tips
  - trivia
draft: false
---

<!-- https://commons.wikimedia.org/wiki/File:Caract%C3%A8re_latin_d%27%C3%A9criture,_R_r.png -->

R allows for comments to exist _in tables_. If there's a `#` in the table you're reading (e.g. as a part of a column name like `chromosome#`) then it can cause an unequal number of values between rows (everything on that line following it is ignored). The solution is to specify the comment character explicitly to be used (it can be '' to have no comment characters). Here's an example:

``` r
echo "a, b, c#, d" > test_table.txt

==> 220928_python_trivia_missing/index.qmd <==
---
title: "Trivia: In Python Missing Isn't Equal to Itself"
author: "Daniel Kick"
date: "2022-09-28"
image: "800px-Burmese_python_in_Berlin.jpg"
categories: 
  - code
  - python
  - beginner
  - tips
  - trivia
draft: false
---

<!-- https://commons.wikimedia.org/wiki/File:Burmese_python_in_Berlin.jpg -->

Python quirk I just learned and think is worth sharing. *A missing valued doesn't equal itself.*

Here's the context: I'm making a list of values from a column that could not be converted to a date. Missing values can't be converted so they end up in the list (e.g. `[nan, '7/5/21 for pass 2']`. So how do we discard this empty value? We use a list comprehension to see if the value is equal to itself ( `[val for val in my_list if val == val]` ) and will get a nan free list.

==> 221027_hpc_access_running_session/index.qmd <==
---
title: "Tips: Open a new Interactive Session in Running Session"
author: "Daniel Kick"
date: "2022-10-27"
image: "604px-Pinguins,_Bestanddeelnr_909-4582.jpg"
categories: 
  - code
  - hpc
  - intermediate
  - tips
draft: false
---

<!-- https://commons.wikimedia.org/wiki/File:Pinguins,_Bestanddeelnr_909-4582.jpg -->

A handy trick with batched processes on an HPC is that you can start an interactive session in a running session. Here's an example where I needed to check if I was nearing the maximum allowed memory:

Here I list my active jobs to get the `jobid`, run bash on that node, and list the processes by memory usage.

``` bash

==> 230524_linux_do_nothing_scripting/index.qmd <==
---
title: "Tips: Do-nothing Scripting in Bash"
author: "Daniel Kick"
date: "2023-05-24"
image: "604px-Pinguins,_Bestanddeelnr_909-4582.jpg"
categories: 
  - code
  - bash
  - beginner
  - tips
draft: false
---

<!-- https://commons.wikimedia.org/wiki/File:Pinguins,_Bestanddeelnr_909-4582.jpg -->

[Do-nothing scripting](https://blog.danslimmon.com/2019/07/15/do-nothing-scripting-the-key-to-gradual-automation/) is a nice way to blend documenting a protocol with running it. You can use this template as a place to start:


``` bash
#!/usr/bin/bash

==> 230607_simulating_ensembles/index.qmd <==
---
title: "Simulation as a Super Power"
author: "Daniel Kick"
date: "2023-09-21"
image: "Two_women_operating_ENIAC.gif"
categories: 
  - code
  - intermediate
  - ensembling
draft: false
freeze: true
---

```{r}
#| echo: false
#| warning: false

# https://commons.wikimedia.org/wiki/File:Two_women_operating_ENIAC.gif

library(tidyverse)

==> 230912_vignettes_for_tacit_knowledge/index.qmd <==
---
title: "Capturing Tacit Knowledge Through Blogging"
subtitle: "(Or why am I writing and who is it for?)"
author: "Daniel Kick"
date: "2023-09-12"
image: "800px-Apprenticeship.jpg"
categories: 
  - tacit knowledge
  - beginner
freeze: true
---

```{r}
#| echo: false
#| eval: false
# https://commons.wikimedia.org/wiki/File:Apprenticeship.jpg
```


## Advice à la carte

==> 230913_filtering_to_save_88pr_space/index.qmd <==
---
title: "Save only what you need"
subtitle: "Saving 88% disk space with a few lines of `R`"
author: "Daniel Kick"
date: "2023-09-13"
image: "IBM_card_storage.NARA.jpg"
categories: 
  - code
  - debugging
  - tacit knowledge
  - beginner
freeze: true
---

```{r, echo=FALSE}
#| warning: false
# https://commons.wikimedia.org/wiki/File:IBM_card_storage.NARA.jpg
library(tidyverse)
library(kableExtra)


==> 230915_solving_the_wrong_problem/index.qmd <==
---
title: "Solving the Wrong Problem"
subtitle: "(or why you shouldn't believe things you know)"
author: "Daniel Kick"
date: "2023-09-15"
image: "ExampleConnectionsKegg.png"
categories: 
  - code
  - debugging
  - tacit knowledge
  - intermediate
freez: true
draft: false
---

## What you know that ain't so

There's a perspective that "it is better to know nothing than to know what ain't so."[1](https://quoteinvestigator.com/2015/05/30/better-know/) In my experience this is certainly the case with debugging because "knowing" will lead you down a rabbit trail of trying to solve the wrong problem.

The approach that works well for me is to "trust but verify" your knowledge. If your initial attempts to fix the bug in your code don't work, take some time to check your assumptions -- specifically your assumptions about where the bug is. This slows down your work initially because you're often testing things that *are* behaving as you expect expectations, but this saves you from spending a lot of time trying to fix the wrong problems.

==> 230915_vnn_overview/index.qmd <==
---
title: "Making a \"Visible\" Neural Network"
author: "Daniel Kick"
date: "2023-09-15"
categories: 
  - code
  - advanced
draft: False
---

## What's a visual neural network?

In most neural networks, neurons are not parametric in the same way that linear models are. In a image recognition model there may be neuron which *functions* to detects edges but when the model is set up initially one can't point to a neuron and say what it will do or represent. This can make interpreting the weights in a model tricky.

Visible neural networks (VNN) are one way to get around this problem by making the structure of a model reflect the process being modeled. In a VNN, influential sub-components may be interpreted as implicating the process they represent as being important. Within biology VNNs have been used by [Ma et al. 2018](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5882547/) and [Hilten et al. 2021](https://www.nature.com/articles/s42003-021-02622-z) working in yeast and humans respectively (in the later mixed performance, seemingly based on trait complexity).

## A hypothetical gene network

Before scaling to representing gene networks, I built a simple test case and will walk through it below, with all the necessary code (but some of it hidden[^1] for brevity).


==> 231003_profdev_r_for_cv/index.qmd <==
---
title: "Use a spreadsheet to manage your CV & Resume"
author: "Daniel Kick"
date: "2023-10-03"
image: "GitHubOverview.png"
categories: 
  - professional development
  - r
draft: False
---

For the past year I've been using a spreadsheet and RStudio to manage my resume and curriculum vitae. This post is a pitch for why you might want to do this and an overview of the system. There will be a follow up post on how to get started if you decide to use his approach.

## Why use a spreadsheet?

The key reason why you should use a spreadsheet to manage your resume is that it enables easy *filtering and sorting*. In essence your spreadsheet becomes a personal work history database from which you can quickly retrieve entries relevant to the application at hand.

If instead all your experiences went into an all encompassing text document, tailoring a document to a position would require you to go through each section and cut out most of the entries. To be clear -- there are far worse strategies out there. Having a single reference document keeps your information together and means that much of your formatting work is done ahead of time.

This is where RStudio comes in. Rmarkdown gives you a way to draw entries from your spreadsheet, filter them, and then turn those entries into beautifully formatted text. Not to mention *that you can have R update text for you*[^1].

==> 231013_premature_optimiztion_worse_is_better/index.qmd <==
---
title: "Worse is better and not doing things \"right\""
subtitle: "Avoid premature optimization"
author: "Daniel Kick"
date: "2023-10-13"
image: "Alwac_III_computer,_1959.jpg"
categories: 
  - tacit knowledge
  - beginner
  - intermediate
  - code
  - deep learning
freeze: true
---

<!-- https://commons.wikimedia.org/wiki/File:Alwac_III_computer,_1959.jpg -->

"Worse is better" is an idea I get a lot of mileage out of. Here's the crux of it:

> It refers to the argument that software quality does not necessarily increase with functionality: that there is a point where less functionality ("worse") is a preferable option ("better") in terms of practicality and usability. [source](https://en.wikipedia.org/wiki/Worse_is_better)

==> 231229_scheduling_worse_is_better/index.qmd <==
---
title: "Worse is better case study 1"
subtitle: "Safety First with Scheduling"
author: "Daniel Kick"
date: "2023-12-19"
image: "Ariopelta_capensis.png"
categories: 
  - beginner
  - code
freeze: true
---

<!-- https://commons.wikimedia.org/wiki/File:Ariopelta_capensis.png -->

[Slurm](https://slurm.schedmd.com/documentation.html)[^1] is a tool commonly available on computing clusters for scheduling job. For a while I've wanted a local instalition of it so I can queue computational experiments to run while I'm sleeping or gone. Trouble is, it's never been a high enough priority to devote much time to getting it set up (or convince a sysadmin to help me set it up). Every few months I'll work through a tutorial until I find I've exhausted the time set aside for the task without a working installation. After the most recent cycle of this I resolved to build an imperfect solution instead.

[^1]: Indeed, it is named after that slurm.

## Thinking throught the system requirements


==> 240514_bash_jupyter_nb/index.qmd <==
---
title: "Quick Tip: Write notebooks, run scripts"
subtitle: "`jupyter` + `nohup`"
author: "Daniel Kick"
date: "2024-05-14"
image: "PIA21972_Jupiter_Blues.jpg"
categories: 
  - beginner
  - code
  - bash
freeze: true
---

Much of what I write is in notebooks (thanks to the lovely [nbdev](https://nbdev.fast.ai/) library) but there are times where this is not convenient. For instance, while tuning hyperparameters or running other processes that can take a long time, it would be useful to detach a notebook from my IDE while it's running. One dead simple way to do this on linux is with the "no hangup" command (`nohup`). 

All we have to do is:
1. activate the enviroment:

`$ conda activate my_env`


==> 240516_r_qr_email/index.qmd <==
---
title: "Tip: Use `R` to create an email nudge"
author: "Daniel Kick"
date: "2024-04-16"
image: "Caractère_latin_d'écriture,_R_r.png"
categories: 
  - code
  - r
  - beginner
  - tips
draft: false
---

<!-- https://commons.wikimedia.org/wiki/File:Caract%C3%A8re_latin_d%27%C3%A9criture,_R_r.png -->

Suppose you're giving a presentation and you want to make it easy for people to contact you afterwards. Maybe you have your email in the acknowledgements or maybe you make business cards with a qr code to [your website](www.danielkick.com). 

These are good steps but we can go further. Let's make qr code that nudges people to send an email. I've used this to good effect for getting emails of people who would like to be notified when a software project goes live.

Here's the plan:

==> 240624_linux_wsl_ln/index.qmd <==
---
title: "Tip: Make your life easier with Symbolic Links in WSL"
author: "Daniel Kick"
date: "2024-06-24"
image: "https://commons.wikimedia.org/wiki/File:Pinguins,_Bestanddeelnr_909-4582.jpg"
categories: 
  - bash
  - beginner
  - tips
draft: false
---

Modern Windows machines can give you access to Linux command line tools via the [Windows Subsystem for Linux](https://learn.microsoft.com/en-us/windows/wsl/about). On launch the present working directory is set to the subsystem's home rather than a location in the main Window's file structure.

``` bash
$ pwd
/home/<user>
```

The main file structure is in `/mnt/` so if you're for example, trying to pattern match and zip a few files *getting there* is a bit of a pain. The quick solution is to create symbolic links (shortcuts) between the two.

==> 240624_r_GAPIT_container/index.qmd <==
---
title: "Building a GWAS Container"
author: "Daniel Kick"
date: "2024-06-24"
image: "https://commons.wikimedia.org/wiki/File:Caract%C3%A8re_latin_d%27%C3%A9criture,_R_r.png"
categories: 
  - code
  - r
  - bash
  - intermediate
  - containers
  - GWAS
draft: false
---

Today we're going to look at building a container to run a GWAS[^1] on a computing cluster. Container construction *can* be rigorous and necessitate a fair bit of understanding but we can get a lot of the benefits without, say, doing everything we can to make the container small enough to run on the idea of a computer.

[^1]: a Genome Wide Association Study identifies regions in a genome that are associated with a trait

We'll start by looking at a simple script to run GWAS with `GAPIT`. We need only install `tidyverse` and `GAPIT` so our container will be simple.

==> 240625_python_tips_genexp/index.qmd <==
---
title: ""
author: "Daniel Kick"
date: "2024-06-25"
image: "https://commons.wikimedia.org/wiki/File:Burmese_python_in_Berlin.jpg"
categories: 
  - code
  - python
  - beginner
  - tips
draft: true
editor: 
  markdown: 
    wrap: 72
---

I adore *R* with it's first rate statistical tooling and evaluation
tricks[^1] but Python has a number of features I miss when I'm working
elsewhere.

